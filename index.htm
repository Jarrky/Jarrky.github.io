<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, minimum scale=1.0, user-scalable=no">
    <link rel="stylesheet" href="styles.css">
    <style>
    </style>
</head>
<body>
    <br />
    <table class="center">
        <tr>
            <td><div class="content" id="B00"><div class="valign" id="00"></div></div></td>
            <td><div class="content" id="B01"><div class="valign" id="01"></div></div></td>
            <td><div class="content" id="B02"><div class="valign" id="02"></div></div></td>
            <td><div class="content" id="B03"><div class="valign" id="03"></div></div></td>
            <td><div class="content" id="B04"><div class="valign" id="04"></div></div></td>
        </tr>
        <tr>
            <td><div class="content" id="B10"><div class="valign" id="10"></div></div></td>
            <td><div class="content" id="B11"><div class="valign" id="11"></div></div></td>
            <td><div class="content" id="B12"><div class="valign" id="12"></div></div></td>
            <td><div class="content" id="B13"><div class="valign" id="13"></div></div></td>
            <td><div class="content" id="B14"><div class="valign" id="14"></div></div></td>
        </tr>
        <tr>
            <td><div class="content" id="B20"><div class="valign" id="20"></div></div></td>
            <td><div class="content" id="B21"><div class="valign" id="21"></div></div></td>
            <td><div class="content" id="B22"><div class="valign" id="22"></div></div></td>
            <td><div class="content" id="B23"><div class="valign" id="23"></div></div></td>
            <td><div class="content" id="B24"><div class="valign" id="24"></div></div></td>
        </tr>
        <tr>
            <td><div class="content" id="B30"><div class="valign" id="30"></div></div></td>
            <td><div class="content" id="B31"><div class="valign" id="31"></div></div></td>
            <td><div class="content" id="B32"><div class="valign" id="32"></div></div></td>
            <td><div class="content" id="B33"><div class="valign" id="33"></div></div></td>
            <td><div class="content" id="B34"><div class="valign" id="34"></div></div></td>
        </tr>
        <tr>
            <td><div class="content" id="B40"><div class="valign" id="40"></div></div></td>
            <td><div class="content" id="B41"><div class="valign" id="41"></div></div></td>
            <td><div class="content" id="B42"><div class="valign" id="42"></div></div></td>
            <td><div class="content" id="B43"><div class="valign" id="43"></div></div></td>
            <td><div class="content" id="B44"><div class="valign" id="44"></div></div></td>
        </tr>
        <tr>
            <td><div class="content" id="B50"><div class="valign" id="50"></div></div></td>
            <td><div class="content" id="B51"><div class="valign" id="51"></div></div></td>
            <td><div class="content" id="B52"><div class="valign" id="52"></div></div></td>
            <td><div class="content" id="B53"><div class="valign" id="53"></div></div></td>
            <td><div class="content" id="B54"><div class="valign" id="54"></div></div></td>
        </tr>
    </table>
    <br />

    <div class="box">
        <div class="flex-parent btn-group">
            <button type="button" onclick="letter('Q')" id="Q">Q</button>
            <button type="button" onclick="letter('W')" id="W">W</button>
            <button type="button" onclick="letter('E')" id="E">E</button>
            <button type="button" onclick="letter('R')" id="R">R</button>
            <button type="button" onclick="letter('T')" id="T">T</button>
            <button type="button" onclick="letter('Y')" id="Y">Y</button>
            <button type="button" onclick="letter('U')" id="U">U</button>
            <button type="button" onclick="letter('I')" id="I">I</button>
            <button type="button" onclick="letter('O')" id="O">O</button>
            <button type="button" onclick="letter('P')" id="P">P</button>
        </div>

        <div class="flex-parent btn-group">
            <button type="button" onclick="letter('A')" id="A">A</button>
            <button type="button" onclick="letter('S')" id="S">S</button>
            <button type="button" onclick="letter('D')" id="D">D</button>
            <button type="button" onclick="letter('F')" id="F">F</button>
            <button type="button" onclick="letter('G')" id="G">G</button>
            <button type="button" onclick="letter('H')" id="H">H</button>
            <button type="button" onclick="letter('J')" id="J">J</button>
            <button type="button" onclick="letter('K')" id="K">K</button>
            <button type="button" onclick="letter('L')" id="L">L</button>

        </div>

        <div class="flex-parent btn-group">
            <button class="EnterButton" type="button" onclick="submitLets()">ENT</button>
            <button type="button" onclick="letter('Z')" id="Z">Z</button>
            <button type="button" onclick="letter('X')" id="X">X</button>
            <button type="button" onclick="letter('C')" id="C">C</button>
            <button type="button" onclick="letter('V')" id="V">V</button>
            <button type="button" onclick="letter('B')" id="B">B</button>
            <button type="button" onclick="letter('N')" id="N">N</button>
            <button type="button" onclick="letter('M')" id="M">M</button>
            <button class="DelButton" type="button" onclick="backspace()" id="DEL">DEL</button>
        </div>
    </div>

    <div id="overlay" onclick="off('overlay')">
        <div id="text">Congratulations!</div>
    </div>

    <div id="overlay2" onclick="off('overlay2')">
        <div id="textOverlay">Unlucky!</div>
    </div>


    <!-- FUNCTIONS -->
    <!-- Functions: imported from wordlist file -->
    <script type="text/javascript" src="wordlist.js"></script>

    <!-- Functions: page features -->
    <script>
        // Function: Shake letters not in list
        function notInList() {
            for (i = 0; i < 5; i++) {
                document.getElementById('B' + guessLevel.toString() + i.toString()).classList.toggle('shake');
            }
        }

        // Functions: overlay off/on
        function on(overlayChoice) {
            document.getElementById(overlayChoice).style.display = "block";
        }
        function off(overlayChoice) {
            document.getElementById(overlayChoice).style.display = "none";
            window.location.reload();
        }

        // Function: keyboard press
        document.addEventListener('keydown', logKey);
        function logKey(e) {
            if ((`${e.code}`).includes("Key")) {
                letter((`${e.code}`).substr(3));
            }
            else if ((`${e.code}`) == "Enter") {
                submitLets();
            }
            else if ((`${e.code}`) == "Backspace") {
                backspace();
            }
        }

        // Function: backspace press
        function backspace() {
            for (let i = 4; i >= 0; i--) {
                let k = guessLevel.toString() + i.toString();
                if (document.getElementById(guessLevel.toString() + i.toString()).innerHTML != "") {
                    document.getElementById(guessLevel.toString() + i.toString()).innerHTML = "";
                    break;
                }
            }
        }

        // Function: letter press
        function letter(example) {
            for (let i = 0; i < 5; i++) {
                let k = guessLevel.toString() + i.toString();
                if (document.getElementById(k).innerHTML == "") {
                    document.getElementById(k).innerHTML = example;
                    break;
                }
            }
        }

        // Function: change the class of each table element to plain colour
        function changePlainClass(guessLvl, iteration, colourNumber) {
            switch (colourNumber) {
                case "0":
                    document.getElementById('B' + guessLvl.toString() + iteration.toString()).classList.toggle('plainGreen');
                    break;
                case "1":
                    document.getElementById('B' + guessLvl.toString() + iteration.toString()).classList.toggle('plainBlack');
                    break;
                case "2":
                    document.getElementById('B' + guessLvl.toString() + iteration.toString()).classList.toggle('plainYellow');
                    break;
            }

        }

        // Function: change the colour of each table element using an animation
        function changeClassName(iteration, GYBS, guessLetter) {
            switch (GYBS) {
                case 0:
                    // box colour
                    document.getElementById('B' + guessLevel.toString() + iteration.toString()).classList.toggle('greenPulse' + iteration.toString());
                    // keyboard colour
                    document.getElementById(guessLetter.toString()).style.backgroundColor = '#6aaa65';
                    break;
                case 1:
                    document.getElementById('B' + guessLevel.toString() + iteration.toString()).classList.toggle('blackPulse' + iteration.toString());
                    document.getElementById(guessLetter.toString()).style.backgroundColor = '#787c7f';
                    break;
                case 2:
                    document.getElementById('B' + guessLevel.toString() + iteration.toString()).classList.toggle('yellowPulse' + iteration.toString());
                    document.getElementById(guessLetter.toString()).style.backgroundColor = '#c9b457';
                    break;
            }
        }


        // Function for submitting of the guess
        function submitLets() {
            // store today's date
            var todaysDate = (new Date()).setHours(0, 0, 0, 0);
            window.localStorage.setItem("todaysDate", todaysDate);

            let check = false;

            // set the variable guessWord equal to the 5 letters submitted
            var guessWord = document.getElementById(guessLevel.toString() + "0").innerHTML +
                document.getElementById(guessLevel.toString() + "1").innerHTML +
                document.getElementById(guessLevel.toString() + "2").innerHTML +
                document.getElementById(guessLevel.toString() + "3").innerHTML +
                document.getElementById(guessLevel.toString() + "4").innerHTML;

            // if the user tries to submit an incomplete word or word not in list
            if (guessWord.length != 5) {
                // do something?
            } else if (checkWord(guessWord) == 0) {
                notInList();
            } else {
                check = true;
            }

            // if the check is completed and the guess is okay
            if (check) {

                // variables to track ********. 0 = correct, 1 = incorrect , 2 = wrong position
                const ans = [1, 1, 1, 1, 1];
                var guessCounter = [1, 1, 1, 1, 1];

                // for each letter in the guess
                for (i = 0; i < 5; i++) {
                    // if the letter matches
                    if (guessWord[i] == wordToGuess[i]) {
                        // set the index of that correct letter to 0 (green)
                        ans[i] = 0;
                        // increment the guessCounter for that index
                        guessCounter[wordToGuess.indexOf(guessWord[i])]++;
                    }
                }

                // for each letter in the guess, check if located in other location in word
                for (i = 0; i < 5; i++) {
                    // if the letter is incorrect or wrong position
                    if (ans[i] != 0) {
                        var wordToGuessOccurences = wordToGuess.split(guessWord[i]).length - 1;
                        if (guessCounter[wordToGuess.indexOf(guessWord[i])] <= wordToGuessOccurences && wordToGuess.indexOf(guessWord[i]) > -1) {
                            ans[i] = 2;
                        }
                        else {
                            ans[i] = 1;
                        }
                        guessCounter[wordToGuess.indexOf(guessWord[i])]++;
                    }
                }

                // animate the change of colour for the classes
                for (i = 0; i < 5; i++) {
                    changeClassName(i, ans[i], guessWord[i]);
                }


                // local storage for the keyboard colours
                const alphabet = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
                const alphabet_ = {};
                // store the colour of each letter in "alphabet_" object, i.e. "A: '#787c7f'"
                for (i = 0; i < alphabet.length; i++) {
                    var keyName = alphabet[i];
                    alphabet_[keyName] = document.getElementById(alphabet[i]).style.backgroundColor;
                }
                // store in local storage, using JSON to convert to string (required for object storage)
                window.localStorage.setItem("keyboardColours", JSON.stringify(alphabet_));

                
                // local storage for the guessedword, and the relevant class colours (answer)
                window.localStorage.setItem('guessWord' + guessLevel.toString(), guessWord);
                for (i = 0; i < 5; i++) {
                    window.localStorage.setItem("answer" + guessLevel.toString() + i.toString(), ans[i]);
                }
                // After a successfull guess, increment the guess level
                guessLevel += 1;
            }

            // if the guess is correct
            if (wordToGuess == guessWord) {
                setTimeout(reset, 2000);
            }

            // if the guess is wrong and the final guess
            if (guessLevel == 6 && wordToGuess != guessWord) {
                document.getElementById("textOverlay").innerHTML = "Unlucky, word was " + wordToGuess;
                setTimeout(function () { on('overlay2'); }, 2000);
            }

        }

        // Function: reset the letters
        function reset() {
            for (i = 0; i < 6; i++) {
                clearLets(i);
            }
            for (j = 0; j < 6; j++) {
                for (i = 0; i < 5; i++) {
                    document.getElementById(j.toString() + i.toString()).classList.toggle('resetPulse');
                }
            }
            guessLevel = 0;
            on("overlay");
        }

        // Function: clear a row of letters
        function clearLets(levelOn) {
            for (let i = 0; i < 5; i++) {
                let k = levelOn.toString() + i.toString();
                document.getElementById(k).innerHTML = "";
            }
        }

    </script>


    <!-- Program Execution -->
    <script>
        // Level of guess from 0 to 5. 0 being first layer, 5 being last layer.
        var guessLevel = 0;

        // Checking the date that was stored on letter submission verses todays date. If they are not level, local storage variables are cleared
        var dateCheck = (new Date()).setHours(0, 0, 0, 0);
        if (dateCheck != window.localStorage.getItem("todaysDate") && window.localStorage.getItem("todaysDate") != null) {
            localStorage.clear();
        }

        // Use this for testing locally
        // localStorage.clear()

        // Reading the guessed words and their appropriate colours from local storage
        // Loop for each layer
        for (storageGuessLevel = 0; storageGuessLevel < 6; storageGuessLevel++) {
            // if there is a stored guess for that layer
            if (window.localStorage.getItem("guessWord" + storageGuessLevel.toString()) != null) {
                // get the stored word
                var storedWord = window.localStorage.getItem("guessWord" + storageGuessLevel.toString());
                var answerColour;

                // for each letter in the word
                for (guessLetterIndex = 0; guessLetterIndex < 5; guessLetterIndex++) {
                    // Display the letter in the correct location
                    document.getElementById(storageGuessLevel.toString() + guessLetterIndex.toString()).innerHTML = storedWord[guessLetterIndex];
                    // Get the colour of the guess type from storage
                    answerColour = window.localStorage.getItem("answer" + storageGuessLevel.toString() + guessLetterIndex.toString());
                    // Change the colour of the box
                    changePlainClass(storageGuessLevel, guessLetterIndex, answerColour)
                }
                // Increment the guess level
                guessLevel++;
            }
        }

        // Reading keyboard colours from local storage
        keyboardColours = window.localStorage.getItem("keyboardColours");
        // JSON needed to convert back to object from string
        keyboardColoursObject = JSON.parse(keyboardColours);
        // for each property (A,B,C,...), get element by Id of that property, and change the colour to the equivalent colour for that property
        for (const property in keyboardColoursObject) {
            document.getElementById(property).style.backgroundColor = keyboardColoursObject[property];
        }


        // Creating an array of dates
        const today = new Date().toDateString();
        const dates = new Array(1000);
        dates[0] = new Date("02/10/2022");
        for (i = 1; i < 1000; i++) {
            dates[i] = new Date("02/10/2022");
            dates[i].setDate(dates[0].getDate() + i);
            dates[i] = dates[i].toDateString();
        }

        // Set the word based on current date
        var wordToGuess = setWord(dates);

    </script>


</body>


</html>


